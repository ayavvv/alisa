<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.eclipse.org/birt/2005/design" version="3.2.23" id="1">
    <property name="createdBy">Eclipse BIRT Designer Version 4.5.0.v201506092134 Build &lt;@BUILD@></property>
    <property name="units">in</property>
    <property name="iconFile">/templates/blank_report.gif</property>
    <property name="bidiLayoutOrientation">ltr</property>
    <property name="imageDPI">96</property>
    <data-sources>
        <script-data-source name="requirements" id="4">
            <method name="open"><![CDATA[/*
 * <copyright>
 * Copyright 2016 by Carnegie Mellon University, all rights reserved.
 *
 * Use of the Open Source AADL Tool Environment (OSATE) is subject to the terms of the license set forth
 * at http://www.eclipse.org/legal/epl-v10.html.
 *
 * NO WARRANTY
 *
 * ANY INFORMATION, MATERIALS, SERVICES, INTELLECTUAL PROPERTY OR OTHER PROPERTY OR RIGHTS GRANTED OR PROVIDED BY
 * CARNEGIE MELLON UNIVERSITY PURSUANT TO THIS LICENSE (HEREINAFTER THE "DELIVERABLES") ARE ON AN "AS-IS" BASIS.
 * CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, INFORMATIONAL CONTENT,
 * NONINFRINGEMENT, OR ERROR-FREE OPERATION. CARNEGIE MELLON UNIVERSITY SHALL NOT BE LIABLE FOR INDIRECT, SPECIAL OR
 * CONSEQUENTIAL DAMAGES, SUCH AS LOSS OF PROFITS OR INABILITY TO USE SAID INTELLECTUAL PROPERTY, UNDER THIS LICENSE,
 * REGARDLESS OF WHETHER SUCH PARTY WAS AWARE OF THE POSSIBILITY OF SUCH DAMAGES. LICENSEE AGREES THAT IT WILL NOT
 * MAKE ANY WARRANTY ON BEHALF OF CARNEGIE MELLON UNIVERSITY, EXPRESS OR IMPLIED, TO ANY PERSON CONCERNING THE
 * APPLICATION OF OR THE RESULTS TO BE OBTAINED WITH THE DELIVERABLES UNDER THIS LICENSE.
 *
 * Licensee hereby agrees to defend, indemnify, and hold harmless Carnegie Mellon University, its trustees, officers,
 * employees, and agents from all claims or demands made against them (and any related losses, expenses, or
 * attorney's fees) arising out of, or relating to Licensee's and/or its sub licensees' negligent use or willful
 * misuse of or negligent conduct or willful misconduct regarding the Software, facilities, or other rights or
 * assistance granted by Carnegie Mellon University under this License, including, but not limited to, any claims of
 * product liability, personal injury, death, damage to property, or violation of any laws or regulations.
 *
 * Carnegie Mellon University Software Engineering Institute authored documents are sponsored by the U.S. Department
 * of Defense under Contract F19628-00-C-0003. Carnegie Mellon University retains copyrights in all material produced
 * under this contract. The U.S. Government retains a non-exclusive, royalty-free license to publish or reproduce these
 * documents, or allow others to do so, for U.S. Government purposes only pursuant to the copyright license
 * under the contract clause at 252.227.7013.
 * </copyright>
 */
Alisa = new JavaImporter(
	org.eclipse.xtext,
	org.osate.aadl2,
	org.osate.aadl2.instance,
	org.osate.reqspec,
	org.osate.reqspec.util)


function goalsForRequirement(requirement, comp) {
	var result = new java.util.TreeSet(comp)

	result.addAll(requirement.getGoalReference())
	if (result.isEmpty()) {
		for (var req in Iterator(requirement.getRefinesReference())) {
			addNonDropped(result, goalsForRequirement(req, comp))
		}
		for (var req in Iterator(requirement.getDecomposesReference())) {
			addNonDropped(result, goalsForRequirement(req, comp))
		}
		for (var req in Iterator(requirement.getEvolvesReference())) {
			addNonDropped(result, goalsForRequirement(req, comp))
		}
	}
	return result
}

function stakeholdersForGoal(goal, comp) {
	var result = new java.util.TreeSet(comp)

	result.addAll(goal.getStakeholderReference())
	if (result.isEmpty()) {
		for (var goal in Iterator(goal.getGoalReference())) {
			addNonDropped(result, stakeholdersForGoal(goal, comp))
		}
		for (var goal in Iterator(goal.getRefinesReference())) {
			addNonDropped(result, stakeholdersForGoal(goal, comp))
		}
		for (var req in Iterator(requirement.getEvolvesReference())) {
			addNonDropped(result, stakeholdersForGoal(goal, comp))
		}
	}
	return result
}

function addNonDropped(set, elements) {
	for (var e in Iterator(elements)) {
		if (!e.isDropped()) {
			set.add(e)
		}
	}
}

function qualifiedName(ne) {
	var container = ne.eContainer()
	if (typeof(container.name) === "undefined")
		return ne.getName()
	else
		return container.getName() + '.' + ne.getName()
}

with (Alisa) {
	type = reportContext.getParameterValue('FileType')
	file = reportContext.getParameterValue('AADLFile')
	report = reportContext.getParameterValue('ReportType')

	// get reqspec reference finder from guice
	
	var registry = org.eclipse.xtext.resource.IResourceServiceProvider$Registry.INSTANCE
	var uri = org.eclipse.emf.common.util.URI.createPlatformResourceURI(file)
	var provider
	if (type =='instance') {
		resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl()
		resource = resourceSet.getResource(uri, true)
		var si = resource.getContents().get(0)
		uri1 = si.getComponentImplementation().eResource().getURI()
		provider = registry.getResourceServiceProvider(uri1)
		resource.unload()
	} else {
		provider = registry.getResourceServiceProvider(uri)
	}
	var finder = provider.get(IReqspecGlobalReferenceFinder)

	// load the file

	resourceSet = provider.get(org.eclipse.xtext.resource.XtextResourceSet)
	resourceSet.addLoadOption(org.eclipse.xtext.resource.XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE)
	resource = resourceSet.createResource(uri)
	resource.load(resourceSet.getLoadOptions())
	
	var sysreqs = new java.util.HashSet()
	
	if (type =='instance') {
		// get requirements used in instance model
		
		var componentInstances = new java.util.ArrayList()
		si = resource.contents.get(0)
		componentInstances.add(si)
		componentInstances.addAll(EcoreUtil2.getAllContentsOfType(si, ComponentInstance))
		
		for(var ci in Iterator(componentInstances)) {
			var srss = finder.getSystemRequirementSets(ci)
			if (srss != null) {
				for (var iter = srss.iterator(); iter.hasNext();) {
					sysreqs.add(iter.next())
				}
			}
		}
	} else 	if (type == 'package') {
		// get requirements used in package
	
		var pack = resource.getContents().get(0)
		var classifiers = EcoreUtil2.getAllContentsOfType(pack, ComponentClassifier)
		for(var c in Iterator(classifiers)) {
			var srss = finder.getSystemRequirementSets(c)
			if (srss != null) {
				for (var iter = srss.iterator(); iter.hasNext();) {
					sysreqs.add(iter.next())
				}
			}
		}		
	} else if (type == 'reqspec') {
		// get requirements from reqspec file
		 
		var reqspec = resource.getContents().get(0)
		for (var part in Iterator(reqspec.getParts())) {
			if (part instanceof org.osate.reqspec.reqSpec.SystemRequirementSet) {
				sysreqs.add(part)
			}
		}
	} else if (type == 'goals') {
		// get goals from goals file
		
		var goals = new java.util.ArrayList()
		var reqspec = resource.getContents().get(0)
		for (var part in Iterator(reqspec.getParts())) {
			if (part instanceof org.osate.reqspec.reqSpec.StakeholderGoals) {
				goals.addAll(part.getGoals())
			}
		}
	}
	
	var requirements = new java.util.ArrayList()
	for (var srs in Iterator(sysreqs)) {
		requirements.addAll(srs.getRequirements())
	}

	// sort requirements/goals by qualified name
	
	var qncomp = JavaAdapter(java.util.Comparator, {
		compare: function (ne1, ne2) {
			return qualifiedName(ne1).localeCompare(qualifiedName(ne2))
		}
	})
	
	requirement2goals = new java.util.TreeMap(qncomp)
	goal2stakeholders = new java.util.TreeMap(qncomp)

	if (type != 'goals') {	
		goals = new java.util.HashSet()
		for (var req in Iterator(requirements)) {
			if (!req.isDropped()) {
				var gs = goalsForRequirement(req, qncomp)
				requirement2goals.put(req, gs)
				goals.addAll(gs)
			}
		}
	}
	for (var goal in Iterator(goals)) {
		if (!goal.isDropped()) {
			goal2stakeholders.put(goal, stakeholdersForGoal(goal, qncomp))
		}
	}
}
]]></method>
            <method name="close"><![CDATA[resource.unload()
resourceSet = null
requirement2goals = null
goal2stakeholders = null]]></method>
        </script-data-source>
    </data-sources>
    <data-sets>
        <script-data-set name="sysreqtrace" id="5">
            <list-property name="resultSetHints">
                <structure>
                    <property name="position">1</property>
                    <property name="name">reqname</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">2</property>
                    <property name="name">reqtitle</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">3</property>
                    <property name="name">reqdescription</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">4</property>
                    <property name="name">goalname</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">5</property>
                    <property name="name">goaltitle</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">6</property>
                    <property name="name">goaldescription</property>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="position">7</property>
                    <property name="name">stakeholdername</property>
                    <property name="dataType">string</property>
                </structure>
            </list-property>
            <list-property name="columnHints">
                <structure>
                    <property name="columnName">reqname</property>
                </structure>
                <structure>
                    <property name="columnName">reqtitle</property>
                </structure>
                <structure>
                    <property name="columnName">reqdescription</property>
                </structure>
                <structure>
                    <property name="columnName">goalname</property>
                </structure>
                <structure>
                    <property name="columnName">goaltitle</property>
                </structure>
                <structure>
                    <property name="columnName">goaldescription</property>
                </structure>
                <structure>
                    <property name="columnName">stakeholdername</property>
                </structure>
            </list-property>
            <structure name="cachedMetaData">
                <list-property name="resultSet">
                    <structure>
                        <property name="position">1</property>
                        <property name="name">reqname</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">2</property>
                        <property name="name">reqtitle</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">3</property>
                        <property name="name">reqdescription</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">4</property>
                        <property name="name">goalname</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">5</property>
                        <property name="name">goaltitle</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">6</property>
                        <property name="name">goaldescription</property>
                        <property name="dataType">string</property>
                    </structure>
                    <structure>
                        <property name="position">7</property>
                        <property name="name">stakeholdername</property>
                        <property name="dataType">string</property>
                    </structure>
                </list-property>
            </structure>
            <property name="dataSource">requirements</property>
            <method name="open"><![CDATA[if (report == 'requirement2goals') {
	currentR2G = requirement2goals.firstEntry()
	if (currentR2G != null) {
		iter = currentR2G.getValue().iterator()
	}
} else {
	currentG2S = goal2stakeholders.firstEntry()
	iter = currentG2S.getValue().iterator()
	if (currentG2S != null) {
		iter = currentG2S.getValue().iterator()
	}
}
]]></method>
            <method name="fetch"><![CDATA[function qualifiedName(ne) {
	var container = ne.eContainer()
	if (typeof(container.name) === "undefined")
		return ne.getName()
	else
		return container.getName() + '.' + ne.getName()
}

with (Alisa) {
	if (report == 'requirement2goals') {
		if (currentR2G == null) {
			return false
		}
		if (typeof r != 'undefined') {
			prev = r
		}
		r = currentR2G.getKey()
		var g = null

		if (currentR2G.getValue().isEmpty()) {
			currentR2G = requirement2goals.higherEntry(r)
			if (currentR2G != null) {
				iter = currentR2G.getValue().iterator()
			}
		} else {
			g = iter.next()
			if (!iter.hasNext()) {
				currentR2G = requirement2goals.higherEntry(r)
				if (currentR2G != null) {
					iter = currentR2G.getValue().iterator()
				}
			}
		} 
		
		if (typeof prev == 'undefined' ||  r != prev) {
			row['reqname'] = qualifiedName(r)
			row['reqtitle'] = r.getTitle()
		}
		
		if (g != null) { 
			row['goalname'] = qualifiedName(g)
			row['goaltitle'] = g.getTitle()
		}
		return true
	}
	if (report == 'goal2stakeholders') {
		if (currentG2S == null) {
			return false
		}
		if (typeof g2 != 'undefined') {
			prev = g2
		}
		g2 = currentG2S.getKey()
		var s = null

		if (currentG2S.getValue().isEmpty()) {
			currentG2S = goal2stakeholders.higherEntry(g2)
			if (currentG2S != null) {
				iter = currentG2S.getValue().iterator()
			}
		} else {
			s = iter.next()
			if (!iter.hasNext()) {
				currentG2S = goal2stakeholders.higherEntry(g2)
				if (currentG2S != null) {
					iter = currentG2S.getValue().iterator()
				}
			}
		} 
		
		if (typeof prev == 'undefined' || g2 != prev) {
			row['goalname'] = qualifiedName(g2)
			row['goaltitle'] = g2.getTitle()
		}
		
		if (s != null) { 
			row['stakeholdername'] = qualifiedName(s)
		}
		return true
	}
}
]]></method>
        </script-data-set>
    </data-sets>
    <page-setup>
        <simple-master-page name="Simple MasterPage" id="2">
            <page-footer>
                <grid id="80">
                    <column id="81"/>
                    <column id="82"/>
                    <row id="83">
                        <cell id="84">
                            <text id="100">
                                <property name="contentType">html</property>
                                <text-property name="content"><![CDATA[<value-of>new Date()</value-of>]]></text-property>
                            </text>
                        </cell>
                        <cell id="85">
                            <auto-text id="98">
                                <property name="textAlign">right</property>
                                <property name="type">page-number</property>
                            </auto-text>
                        </cell>
                    </row>
                </grid>
            </page-footer>
        </simple-master-page>
    </page-setup>
    <body>
        <label id="102">
            <property name="fontSize">14pt</property>
            <property name="textAlign">center</property>
            <list-property name="visibility">
                <structure>
                    <property name="format">all</property>
                    <expression name="valueExpr" type="javascript">reportContext.getParameterValue('ReportType') != 'requirement2goals'</expression>
                </structure>
            </list-property>
            <text-property name="text">System Requirement to Stakeholder Goal Report</text-property>
        </label>
        <label id="103">
            <property name="fontSize">14pt</property>
            <property name="textAlign">center</property>
            <list-property name="visibility">
                <structure>
                    <property name="format">all</property>
                    <expression name="valueExpr" type="javascript">reportContext.getParameterValue('ReportType') != 'goal2stakeholders'</expression>
                </structure>
            </list-property>
            <text-property name="text">Stakeholder Goal to Stakeholder Report</text-property>
        </label>
        <data id="101">
            <property name="fontSize">9pt</property>
            <property name="fontStyle">italic</property>
            <property name="marginBottom">15pt</property>
            <property name="textAlign">center</property>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">File Name</property>
                    <expression name="expression" type="javascript">'Created from: ' + reportContext.getParameterValue('AADLFile')</expression>
                    <property name="dataType">string</property>
                    <property name="allowExport">true</property>
                </structure>
            </list-property>
            <property name="resultSetColumn">File Name</property>
        </data>
        <table id="6">
            <property name="borderBottomStyle">solid</property>
            <property name="borderBottomWidth">medium</property>
            <property name="borderLeftStyle">solid</property>
            <property name="borderLeftWidth">medium</property>
            <property name="borderRightStyle">solid</property>
            <property name="borderRightWidth">medium</property>
            <property name="borderTopStyle">solid</property>
            <property name="borderTopWidth">medium</property>
            <property name="dataSet">sysreqtrace</property>
            <list-property name="visibility">
                <structure>
                    <property name="format">all</property>
                    <expression name="valueExpr" type="javascript">reportContext.getParameterValue('ReportType') != 'requirement2goals'</expression>
                </structure>
            </list-property>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">reqname</property>
                    <text-property name="displayName">reqname</text-property>
                    <expression name="expression" type="javascript">dataSetRow["reqname"]</expression>
                    <property name="dataType">string</property>
                    <property name="allowExport">true</property>
                </structure>
                <structure>
                    <property name="name">reqtitle</property>
                    <text-property name="displayName">reqtitle</text-property>
                    <expression name="expression" type="javascript">dataSetRow["reqtitle"]</expression>
                    <property name="dataType">string</property>
                    <property name="allowExport">true</property>
                </structure>
                <structure>
                    <property name="name">goalname</property>
                    <text-property name="displayName">goalname</text-property>
                    <expression name="expression" type="javascript">dataSetRow["goalname"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">goaltitle</property>
                    <text-property name="displayName">goaltitle</text-property>
                    <expression name="expression" type="javascript">dataSetRow["goaltitle"]</expression>
                    <property name="dataType">string</property>
                </structure>
            </list-property>
            <column id="20"/>
            <column id="21"/>
            <header>
                <row id="7">
                    <cell id="8">
                        <property name="borderRightStyle">solid</property>
                        <property name="borderRightWidth">1px</property>
                        <label id="9">
                            <property name="fontSize">12pt</property>
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Requirement</text-property>
                        </label>
                    </cell>
                    <cell id="10">
                        <label id="11">
                            <property name="fontSize">12pt</property>
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Goal</text-property>
                        </label>
                    </cell>
                </row>
            </header>
            <detail>
                <row id="12">
                    <property name="borderTopStyle">solid</property>
                    <property name="borderTopWidth">1px</property>
                    <cell id="13">
                        <property name="borderRightStyle">solid</property>
                        <property name="borderRightWidth">1px</property>
                        <grid id="22">
                            <property name="height">0.59375in</property>
                            <column id="23"/>
                            <row id="24">
                                <cell id="25">
                                    <data id="28">
                                        <property name="resultSetColumn">reqname</property>
                                    </data>
                                </cell>
                            </row>
                            <row id="26">
                                <property name="height">0.2916666666666667in</property>
                                <cell id="27">
                                    <data id="29">
                                        <property name="resultSetColumn">reqtitle</property>
                                    </data>
                                </cell>
                            </row>
                        </grid>
                    </cell>
                    <cell id="15">
                        <grid id="30">
                            <column id="31"/>
                            <row id="32">
                                <cell id="33">
                                    <data id="36">
                                        <property name="resultSetColumn">goalname</property>
                                    </data>
                                </cell>
                            </row>
                            <row id="34">
                                <cell id="35">
                                    <data id="37">
                                        <property name="resultSetColumn">goaltitle</property>
                                    </data>
                                </cell>
                            </row>
                        </grid>
                    </cell>
                </row>
            </detail>
            <footer>
                <row id="17">
                    <list-property name="visibility">
                        <structure>
                            <property name="format">all</property>
                            <expression name="valueExpr" type="javascript">true</expression>
                        </structure>
                    </list-property>
                    <cell id="18"/>
                    <cell id="19"/>
                </row>
            </footer>
        </table>
        <table id="38">
            <property name="borderBottomStyle">solid</property>
            <property name="borderBottomWidth">medium</property>
            <property name="borderLeftStyle">solid</property>
            <property name="borderLeftWidth">medium</property>
            <property name="borderRightStyle">solid</property>
            <property name="borderRightWidth">medium</property>
            <property name="borderTopStyle">solid</property>
            <property name="borderTopWidth">medium</property>
            <property name="dataSet">sysreqtrace</property>
            <list-property name="visibility">
                <structure>
                    <property name="format">all</property>
                    <expression name="valueExpr" type="javascript">reportContext.getParameterValue('ReportType') != 'goal2stakeholders'</expression>
                </structure>
            </list-property>
            <list-property name="boundDataColumns">
                <structure>
                    <property name="name">stakeholdername</property>
                    <text-property name="displayName">stakeholdername</text-property>
                    <expression name="expression" type="javascript">dataSetRow["stakeholdername"]</expression>
                    <property name="dataType">string</property>
                    <property name="allowExport">true</property>
                </structure>
                <structure>
                    <property name="name">goalname</property>
                    <text-property name="displayName">goalname</text-property>
                    <expression name="expression" type="javascript">dataSetRow["goalname"]</expression>
                    <property name="dataType">string</property>
                </structure>
                <structure>
                    <property name="name">goaltitle</property>
                    <text-property name="displayName">goaltitle</text-property>
                    <expression name="expression" type="javascript">dataSetRow["goaltitle"]</expression>
                    <property name="dataType">string</property>
                </structure>
            </list-property>
            <column id="66"/>
            <column id="67"/>
            <header>
                <row id="39">
                    <cell id="40">
                        <property name="borderRightStyle">solid</property>
                        <property name="borderRightWidth">1px</property>
                        <label id="43">
                            <property name="fontSize">12pt</property>
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Goal</text-property>
                        </label>
                    </cell>
                    <cell id="42">
                        <label id="41">
                            <property name="fontSize">12pt</property>
                            <property name="fontWeight">bold</property>
                            <text-property name="text">Stakeholder</text-property>
                        </label>
                    </cell>
                </row>
            </header>
            <detail>
                <row id="44">
                    <property name="borderTopStyle">solid</property>
                    <property name="borderTopWidth">1px</property>
                    <cell id="45">
                        <property name="borderRightStyle">solid</property>
                        <property name="borderRightWidth">1px</property>
                        <grid id="55">
                            <column id="56"/>
                            <row id="57">
                                <cell id="58">
                                    <data id="59">
                                        <property name="resultSetColumn">goalname</property>
                                    </data>
                                </cell>
                            </row>
                            <row id="60">
                                <cell id="61">
                                    <data id="62">
                                        <property name="resultSetColumn">goaltitle</property>
                                    </data>
                                </cell>
                            </row>
                        </grid>
                    </cell>
                    <cell id="54">
                        <grid id="46">
                            <property name="height">0.59375in</property>
                            <column id="47"/>
                            <row id="48">
                                <cell id="49">
                                    <data id="68">
                                        <property name="resultSetColumn">stakeholdername</property>
                                    </data>
                                </cell>
                            </row>
                            <row id="51">
                                <property name="height">0.2916666666666667in</property>
                                <cell id="52"/>
                            </row>
                        </grid>
                    </cell>
                </row>
            </detail>
            <footer>
                <row id="63">
                    <list-property name="visibility">
                        <structure>
                            <property name="format">all</property>
                            <expression name="valueExpr" type="javascript">true</expression>
                        </structure>
                    </list-property>
                    <cell id="64"/>
                    <cell id="65"/>
                </row>
            </footer>
        </table>
    </body>
</report>
